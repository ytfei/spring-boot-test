stages:
  - build
  - test
  - deploy

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# This template uses jdk8 for verifying and deploying images
image: maven:3.3.9-jdk-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'


# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
build:
  stage: build
  script:
    - 'mvn install -s ci_settings.xml -DskipTests=true'

  artifacts:
    paths:
      - target/*.jar

deploy:
  stage: deploy
  script:
    - scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null target/*.jar root@172.16.16.23:/home/app/application/spring-boot-test/
    - scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null scripts/* root@172.16.16.23:/home/app/application/spring-boot-test/
    - ssh  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@172.16.16.23 <<EOF
      cd /home/app/application/spring-boot-test/
      pm2 stop pm2-conf.json
      pm2 start pm2-conf.json
      EOF

  
    
